// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Ion.flex

package com.amazon.ion.plugin.intellij;

import com.intellij.psi.tree.IElementType;
import com.amazon.ion.plugin.intellij.psi.IonTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;

import static com.amazon.ion.plugin.intellij.helpers.ContentCorrectnessHelper.*;


public class IonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ION_LIST = 2;
  public static final int ION_STRUCT = 4;
  public static final int READ_VALUE = 6;
  public static final int READ_KEY = 8;
  public static final int S_EXP = 10;
  public static final int READ_LOB = 12;
  public static final int READ_QQQ_STR = 14;
  public static final int READ_QQ_STR = 16;
  public static final int READ_Q_STR = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\2\22\0\1\4"+
    "\1\5\1\6\1\5\1\7\1\5\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\10\24\1\25\1\5\1\26\1\27\1\30\2\5"+
    "\3\31\1\32\1\33\1\31\15\34\1\35\5\34\1\36"+
    "\1\37\1\40\1\41\1\5\1\42\1\5\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\34\1\52\2\34"+
    "\1\53\1\54\1\55\1\56\1\57\1\34\1\60\1\61"+
    "\1\62\1\63\2\34\1\64\1\65\1\34\1\66\1\67"+
    "\1\70\1\5\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\2\1\2\10\1\1\1\11\3\4\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\15\1\20\1\21\1\22"+
    "\1\23\1\24\2\1\2\25\1\26\3\22\1\27\2\15"+
    "\1\30\1\31\1\15\3\32\1\33\7\32\1\34\4\35"+
    "\2\1\1\2\1\0\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\1\2\10\1\1\1\11\3\4\1\12\1\36"+
    "\1\37\1\36\1\40\1\41\1\40\2\0\2\10\1\0"+
    "\1\42\1\43\1\10\1\43\3\0\1\44\4\4\1\45"+
    "\1\0\1\46\1\15\2\0\2\25\1\47\1\25\1\47"+
    "\2\0\4\22\1\50\1\0\1\15\5\35\1\51\3\0"+
    "\2\10\1\43\1\10\1\43\3\0\1\44\4\4\1\45"+
    "\1\52\3\0\1\43\1\10\1\43\1\0\1\43\1\53"+
    "\1\54\1\4\1\43\2\4\1\55\1\15\1\56\1\0"+
    "\1\47\1\25\1\47\1\0\1\47\1\57\1\22\1\47"+
    "\2\22\1\60\1\15\5\35\1\0\1\61\1\0\1\43"+
    "\1\10\1\43\1\0\1\43\1\53\1\54\1\4\1\43"+
    "\2\4\1\43\1\0\1\42\1\10\1\0\1\62\1\63"+
    "\1\15\1\47\1\25\1\0\1\64\1\65\1\15\2\35"+
    "\2\66\1\43\1\10\1\0\1\62\1\63\1\42\1\0"+
    "\1\67\2\0\1\70\1\0\2\15\2\35\1\66\1\0"+
    "\1\67\27\0\2\15\1\35\45\0\2\15\1\35\23\0"+
    "\1\62\12\0\1\64\4\0\1\15\6\0\1\62\20\0"+
    "\1\15\6\0\2\67\3\0\2\70\3\0\1\15\2\67"+
    "\5\0\1\67\3\0\1\70\3\0\1\67\13\0\1\67"+
    "\1\0\1\70\1\0\1\67\7\0\1\67\1\0\1\70"+
    "\1\0\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u023a\0\u02ac\0\u02e5\0\u023a"+
    "\0\u031e\0\u023a\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u023a"+
    "\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u023a\0\u023a\0\u0558\0\u0591"+
    "\0\u05ca\0\u0603\0\u023a\0\u023a\0\u063c\0\u0675\0\u023a\0\u06ae"+
    "\0\u06e7\0\u0720\0\u0759\0\u023a\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u023a\0\u08e8\0\u0921\0\u023a\0\u02ac\0\u095a"+
    "\0\u023a\0\u0993\0\u09cc\0\u0a05\0\u0390\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78"+
    "\0\u0c3f\0\u0c3f\0\u0cb1\0\u0cea\0\u0c3f\0\u0d23\0\u0c3f\0\u0d5c"+
    "\0\u0d95\0\u0dce\0\u0e07\0\u0c3f\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\u0f24\0\u023a\0\u0f5d\0\u0f96\0\u02e5\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u023a\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u023a"+
    "\0\u1398\0\u023a\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6"+
    "\0\u023a\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\u023a\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u0c3f\0\u1af1\0\u1b2a\0\u1b63"+
    "\0\u1b9c\0\u0c3f\0\u023a\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9"+
    "\0\u1cf2\0\u1d2b\0\u1d64\0\u1242\0\u127b\0\u1d9d\0\u02ac\0\u1dd6"+
    "\0\u1e0f\0\u023a\0\u1e48\0\u023a\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c"+
    "\0\u1f65\0\u1f9e\0\u15d2\0\u1fd7\0\u063c\0\u2010\0\u2049\0\u023a"+
    "\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211"+
    "\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u1a7f\0\u1ab8"+
    "\0\u23a0\0\u0cb1\0\u23d9\0\u2412\0\u023a\0\u244b\0\u1c0e\0\u2484"+
    "\0\u1d64\0\u24bd\0\u02ac\0\u24f6\0\u023a\0\u252f\0\u1f9e\0\u2568"+
    "\0\u063c\0\u25a1\0\u25da\0\u2613\0\u2211\0\u264c\0\u0c3f\0\u2685"+
    "\0\u2367\0\u26be\0\u0cb1\0\u023a\0\u26f7\0\u2730\0\u2769\0\u27a2"+
    "\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u023a\0\u2931"+
    "\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9"+
    "\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1"+
    "\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89"+
    "\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051"+
    "\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219"+
    "\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1"+
    "\0\u341a\0\u3453\0\u348c\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9"+
    "\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u3771"+
    "\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939"+
    "\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01"+
    "\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u023a\0\u3c90"+
    "\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6\0\u3e1f\0\u3e58"+
    "\0\u3e91\0\u023a\0\u3eca\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7"+
    "\0\u4020\0\u4059\0\u4092\0\u40cb\0\u4104\0\u0c3f\0\u413d\0\u4176"+
    "\0\u41af\0\u41e8\0\u4221\0\u425a\0\u4293\0\u42cc\0\u4305\0\u433e"+
    "\0\u4377\0\u43b0\0\u43e9\0\u4422\0\u445b\0\u4494\0\u44cd\0\u4506"+
    "\0\u453f\0\u4578\0\u45b1\0\u45ea\0\u4623\0\u465c\0\u4695\0\u46ce"+
    "\0\u4707\0\u4740\0\u4779\0\u47b2\0\u47eb\0\u4824\0\u485d\0\u4896"+
    "\0\u48cf\0\u4908\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\u023a"+
    "\0\u4a5e\0\u4a97\0\u4ad0\0\u023a\0\u4b09\0\u4b42\0\u4b7b\0\u0c3f"+
    "\0\u4bb4\0\u4bed\0\u4c26\0\u4c5f\0\u4c98\0\u4cd1\0\u4d0a\0\u4d43"+
    "\0\u4d7c\0\u4db5\0\u4dee\0\u4e27\0\u4e60\0\u4e99\0\u4ed2\0\u4f0b"+
    "\0\u4f44\0\u4f7d\0\u4fb6\0\u4fef\0\u5028\0\u5061\0\u509a\0\u50d3"+
    "\0\u510c\0\u5145\0\u517e\0\u51b7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\2\14\1\0\1\14\1\13\1\15\1\16\1\13"+
    "\1\17\1\20\2\13\1\21\1\22\1\23\1\13\1\24"+
    "\1\25\2\26\1\27\3\13\6\16\1\30\2\13\6\16"+
    "\1\31\4\16\1\32\4\16\1\33\3\16\1\34\3\13"+
    "\2\14\1\0\1\14\1\13\1\15\1\16\1\13\1\17"+
    "\1\20\2\13\1\21\1\22\1\23\1\13\1\24\1\25"+
    "\2\26\1\27\3\13\6\16\1\30\1\13\1\35\6\16"+
    "\1\31\4\16\1\32\4\16\1\33\3\16\1\34\3\13"+
    "\2\14\1\0\1\14\1\13\1\36\1\37\1\13\1\40"+
    "\1\20\2\13\1\21\1\22\1\23\1\13\1\24\1\25"+
    "\2\26\1\41\3\13\6\37\1\30\2\13\13\37\1\42"+
    "\10\37\1\34\1\13\1\43\1\13\2\14\1\0\1\14"+
    "\1\13\1\44\1\45\1\13\1\46\1\47\2\13\1\50"+
    "\1\22\1\51\2\13\1\52\2\53\1\27\3\13\6\45"+
    "\1\54\2\13\6\45\1\55\4\45\1\56\4\45\1\57"+
    "\3\45\1\60\2\13\1\61\2\14\1\61\1\62\1\61"+
    "\1\63\2\61\1\64\10\61\3\65\1\27\12\61\1\13"+
    "\30\61\1\13\2\14\1\0\1\14\1\66\1\15\1\67"+
    "\1\70\1\17\1\20\1\71\1\66\1\72\1\22\1\73"+
    "\1\74\1\75\1\25\2\26\1\27\1\76\1\66\1\77"+
    "\6\16\1\30\2\13\6\16\1\31\4\16\1\32\4\16"+
    "\1\33\3\16\1\34\1\100\2\13\2\14\1\0\1\14"+
    "\1\13\1\15\1\101\1\13\1\17\1\20\2\13\1\102"+
    "\1\22\1\23\1\13\1\102\3\103\1\27\3\13\6\104"+
    "\1\30\2\13\1\101\12\104\1\105\10\104\1\34\1\13"+
    "\1\106\1\107\2\110\1\111\1\110\1\107\1\112\1\113"+
    "\1\107\1\114\1\115\2\107\1\116\1\117\1\120\2\107"+
    "\1\121\2\122\1\123\3\107\6\113\1\124\2\107\6\113"+
    "\1\125\4\113\1\126\4\113\1\127\3\113\1\130\2\107"+
    "\6\131\1\132\31\131\1\133\30\131\11\134\1\135\26\134"+
    "\1\136\30\134\72\0\2\14\1\0\1\14\73\0\1\16"+
    "\12\0\3\16\4\0\6\16\3\0\24\16\14\0\1\137"+
    "\131\0\1\140\40\0\1\141\2\142\25\0\1\140\32\0"+
    "\1\143\4\0\1\144\67\0\1\145\1\0\3\146\5\0"+
    "\1\147\1\150\10\0\1\151\1\0\1\147\1\150\14\0"+
    "\1\152\24\0\1\145\1\0\3\146\5\0\1\147\1\150"+
    "\12\0\1\147\1\150\46\0\1\153\52\0\1\16\12\0"+
    "\3\16\4\0\6\16\3\0\1\16\1\154\22\16\12\0"+
    "\1\16\12\0\3\16\4\0\6\16\3\0\1\16\1\155"+
    "\17\16\1\156\2\16\12\0\1\16\12\0\3\16\4\0"+
    "\6\16\3\0\16\16\1\157\5\16\71\0\1\160\11\0"+
    "\1\37\12\0\3\37\4\0\6\37\3\0\24\37\14\0"+
    "\1\161\104\0\1\162\52\0\1\37\12\0\3\37\4\0"+
    "\6\37\3\0\21\37\1\163\2\37\12\0\1\45\12\0"+
    "\3\45\4\0\6\45\3\0\24\45\14\0\1\164\131\0"+
    "\1\165\40\0\1\166\2\167\25\0\1\165\36\0\1\170"+
    "\1\0\3\171\5\0\1\172\1\173\10\0\1\151\1\0"+
    "\1\172\1\173\14\0\1\174\24\0\1\170\1\0\3\171"+
    "\5\0\1\172\1\173\12\0\1\172\1\173\30\0\1\45"+
    "\12\0\3\45\4\0\6\45\3\0\1\45\1\175\22\45"+
    "\12\0\1\45\12\0\3\45\4\0\6\45\3\0\1\45"+
    "\1\176\17\45\1\177\2\45\12\0\1\45\12\0\3\45"+
    "\4\0\6\45\3\0\16\45\1\200\5\45\71\0\1\201"+
    "\2\0\1\61\2\0\3\61\1\0\2\61\1\0\13\61"+
    "\1\0\12\61\1\0\31\61\2\14\1\61\1\62\1\61"+
    "\1\0\2\61\1\0\13\61\1\0\12\61\1\0\30\61"+
    "\11\0\1\202\57\0\1\61\2\0\3\61\1\0\2\61"+
    "\1\0\10\61\3\203\1\0\12\61\1\0\30\61\10\0"+
    "\1\66\75\0\1\66\34\0\1\140\35\0\1\66\2\0"+
    "\1\141\2\142\25\0\1\140\36\0\1\66\76\0\1\66"+
    "\72\0\1\66\127\0\1\66\10\0\1\101\12\0\3\101"+
    "\4\0\6\101\3\0\24\101\20\0\1\102\3\0\4\102"+
    "\2\0\1\204\1\0\6\102\4\0\23\102\20\0\1\102"+
    "\2\0\1\145\1\102\3\205\2\0\1\204\1\0\1\102"+
    "\1\206\1\207\3\102\4\0\3\102\1\206\1\207\16\102"+
    "\12\0\1\101\5\0\1\102\3\0\1\102\3\104\2\0"+
    "\1\204\1\0\6\104\3\0\1\101\23\104\12\0\1\101"+
    "\5\0\1\102\3\0\1\102\3\104\2\0\1\204\1\0"+
    "\6\104\3\0\1\101\20\104\1\210\2\104\73\0\1\211"+
    "\11\111\1\212\60\111\2\110\1\111\1\110\4\111\1\212"+
    "\66\111\1\113\1\111\1\212\10\111\3\113\4\111\6\113"+
    "\3\111\24\113\14\111\1\213\70\111\1\212\40\111\1\214"+
    "\27\111\1\212\10\111\1\215\2\216\25\111\1\214\27\111"+
    "\1\212\6\111\1\217\1\111\3\220\5\111\1\221\1\222"+
    "\10\111\1\223\1\111\1\221\1\222\14\111\1\224\15\111"+
    "\1\212\6\111\1\217\1\111\3\220\5\111\1\221\1\222"+
    "\12\111\1\221\1\222\32\111\1\212\13\111\1\225\52\111"+
    "\1\113\1\111\1\212\10\111\3\113\4\111\6\113\3\111"+
    "\1\113\1\226\22\113\12\111\1\113\1\111\1\212\10\111"+
    "\3\113\4\111\6\113\3\111\1\113\1\227\17\113\1\230"+
    "\2\113\12\111\1\113\1\111\1\212\10\111\3\113\4\111"+
    "\6\113\3\111\16\113\1\231\5\113\14\111\1\212\54\111"+
    "\1\232\2\111\6\131\1\0\31\131\1\133\70\131\1\133"+
    "\30\131\11\134\1\0\26\134\1\136\70\134\1\136\30\134"+
    "\11\0\1\233\134\0\1\234\33\0\1\145\1\0\3\142"+
    "\5\0\1\147\1\150\12\0\1\147\1\150\14\0\1\152"+
    "\24\0\1\145\1\0\3\142\5\0\1\147\1\150\12\0"+
    "\1\147\1\150\21\0\14\235\1\236\54\235\2\144\1\0"+
    "\66\144\15\0\1\237\1\0\1\237\2\0\3\237\5\0"+
    "\2\150\12\0\2\150\41\0\1\145\1\0\3\240\5\0"+
    "\1\147\1\150\12\0\1\147\1\150\36\0\1\241\1\0"+
    "\1\241\2\0\3\237\5\0\2\150\12\0\2\150\36\0"+
    "\1\242\1\0\1\242\2\0\3\243\66\0\2\244\67\0"+
    "\3\245\4\0\3\245\7\0\6\245\27\0\1\16\12\0"+
    "\3\16\4\0\6\16\3\0\11\16\1\246\12\16\12\0"+
    "\1\16\12\0\3\16\4\0\6\16\3\0\13\16\1\247"+
    "\10\16\12\0\1\16\12\0\3\16\4\0\6\16\3\0"+
    "\11\16\1\250\12\16\12\0\1\16\12\0\3\16\4\0"+
    "\6\16\3\0\21\16\1\251\2\16\14\0\1\252\66\0"+
    "\1\37\12\0\3\37\4\0\6\37\3\0\11\37\1\253"+
    "\12\37\14\0\1\254\134\0\1\255\33\0\1\170\1\0"+
    "\3\167\5\0\1\172\1\173\12\0\1\172\1\173\14\0"+
    "\1\174\24\0\1\170\1\0\3\167\5\0\1\172\1\173"+
    "\12\0\1\172\1\173\36\0\1\256\1\0\1\256\2\0"+
    "\3\256\5\0\2\173\12\0\2\173\41\0\1\170\1\0"+
    "\3\257\5\0\1\172\1\173\12\0\1\172\1\173\36\0"+
    "\1\260\1\0\1\260\2\0\3\256\5\0\2\173\12\0"+
    "\2\173\36\0\1\261\1\0\1\261\2\0\3\262\66\0"+
    "\3\263\4\0\3\263\7\0\6\263\27\0\1\45\12\0"+
    "\3\45\4\0\6\45\3\0\11\45\1\264\12\45\12\0"+
    "\1\45\12\0\3\45\4\0\6\45\3\0\13\45\1\265"+
    "\10\45\12\0\1\45\12\0\3\45\4\0\6\45\3\0"+
    "\11\45\1\266\12\45\12\0\1\45\12\0\3\45\4\0"+
    "\6\45\3\0\21\45\1\267\2\45\14\0\1\270\57\0"+
    "\1\61\2\0\3\61\1\0\2\61\1\0\10\61\3\271"+
    "\1\0\12\61\1\0\30\61\27\0\1\204\56\0\1\102"+
    "\2\0\1\145\1\102\3\272\2\0\1\204\1\0\1\102"+
    "\1\206\1\207\3\102\4\0\3\102\1\206\1\207\16\102"+
    "\20\0\1\273\1\0\1\241\1\0\1\102\3\274\2\0"+
    "\1\204\1\0\1\102\2\207\3\102\4\0\3\102\2\207"+
    "\16\102\20\0\1\275\1\0\1\242\1\0\4\102\2\0"+
    "\1\204\1\0\6\102\4\0\23\102\12\0\1\101\5\0"+
    "\1\102\3\0\1\102\3\104\2\0\1\204\1\0\6\104"+
    "\3\0\1\101\10\104\1\276\12\104\3\0\11\111\1\277"+
    "\70\111\1\300\70\111\1\212\43\111\1\301\24\111\1\212"+
    "\6\111\1\217\1\111\3\216\5\111\1\221\1\222\12\111"+
    "\1\221\1\222\14\111\1\224\15\111\1\212\6\111\1\217"+
    "\1\111\3\216\5\111\1\221\1\222\12\111\1\221\1\222"+
    "\32\111\1\212\3\111\1\302\1\111\1\302\2\111\3\302"+
    "\5\111\2\222\12\111\2\222\32\111\1\212\6\111\1\217"+
    "\1\111\3\303\5\111\1\221\1\222\12\111\1\221\1\222"+
    "\32\111\1\212\3\111\1\304\1\111\1\304\2\111\3\302"+
    "\5\111\2\222\12\111\2\222\32\111\1\212\3\111\1\305"+
    "\1\111\1\305\2\111\3\306\55\111\1\212\10\111\2\307"+
    "\56\111\1\212\10\111\3\310\4\111\3\310\7\111\6\310"+
    "\27\111\1\113\1\111\1\212\10\111\3\113\4\111\6\113"+
    "\3\111\11\113\1\311\12\113\12\111\1\113\1\111\1\212"+
    "\10\111\3\113\4\111\6\113\3\111\13\113\1\312\10\113"+
    "\12\111\1\113\1\111\1\212\10\111\3\113\4\111\6\113"+
    "\3\111\11\113\1\313\12\113\12\111\1\113\1\111\1\212"+
    "\10\111\3\113\4\111\6\113\3\111\21\113\1\314\2\113"+
    "\3\111\50\0\1\315\20\0\14\235\1\316\70\235\1\316"+
    "\4\235\1\317\47\235\22\0\3\237\5\0\2\150\12\0"+
    "\2\150\41\0\1\145\1\0\3\320\5\0\1\147\1\150"+
    "\12\0\1\147\1\150\40\0\1\321\2\0\3\237\5\0"+
    "\2\150\12\0\2\150\40\0\1\321\2\0\3\243\66\0"+
    "\3\243\53\0\1\16\12\0\3\16\4\0\6\16\3\0"+
    "\17\16\1\251\4\16\12\0\1\16\12\0\3\16\4\0"+
    "\6\16\3\0\11\16\1\322\12\16\12\0\1\16\12\0"+
    "\3\16\4\0\6\16\3\0\5\16\1\323\16\16\12\0"+
    "\1\37\12\0\3\37\4\0\6\37\3\0\11\37\1\324"+
    "\12\37\53\0\1\325\42\0\3\256\5\0\2\173\12\0"+
    "\2\173\41\0\1\170\1\0\3\326\5\0\1\172\1\173"+
    "\12\0\1\172\1\173\40\0\1\327\2\0\3\256\5\0"+
    "\2\173\12\0\2\173\40\0\1\327\2\0\3\262\66\0"+
    "\3\262\53\0\1\45\12\0\3\45\4\0\6\45\3\0"+
    "\17\45\1\267\4\45\12\0\1\45\12\0\3\45\4\0"+
    "\6\45\3\0\11\45\1\330\12\45\12\0\1\45\12\0"+
    "\3\45\4\0\6\45\3\0\5\45\1\331\16\45\3\0"+
    "\1\61\2\0\3\61\1\0\2\61\1\0\10\61\3\332"+
    "\1\0\12\61\1\0\30\61\15\0\1\102\2\0\1\145"+
    "\1\102\3\333\2\0\1\204\1\0\1\102\1\206\1\207"+
    "\3\102\4\0\3\102\1\206\1\207\16\102\20\0\1\102"+
    "\1\0\1\321\1\0\1\102\3\274\2\0\1\204\1\0"+
    "\1\102\2\207\3\102\4\0\3\102\2\207\16\102\20\0"+
    "\1\102\3\0\1\102\3\274\2\0\1\204\1\0\1\102"+
    "\2\207\3\102\4\0\3\102\2\207\16\102\20\0\1\102"+
    "\1\0\1\321\1\0\4\102\2\0\1\204\1\0\6\102"+
    "\4\0\23\102\12\0\1\101\5\0\1\102\3\0\1\102"+
    "\3\104\2\0\1\204\1\0\6\104\3\0\1\101\10\104"+
    "\1\334\12\104\3\0\11\111\1\335\57\111\11\0\1\336"+
    "\57\0\11\111\1\212\36\111\1\337\31\111\1\212\10\111"+
    "\3\302\5\111\2\222\12\111\2\222\32\111\1\212\6\111"+
    "\1\217\1\111\3\340\5\111\1\221\1\222\12\111\1\221"+
    "\1\222\32\111\1\212\5\111\1\341\2\111\3\302\5\111"+
    "\2\222\12\111\2\222\32\111\1\212\5\111\1\341\2\111"+
    "\3\306\55\111\1\212\10\111\3\306\53\111\1\113\1\111"+
    "\1\212\10\111\3\113\4\111\6\113\3\111\17\113\1\314"+
    "\4\113\12\111\1\113\1\111\1\212\10\111\3\113\4\111"+
    "\6\113\3\111\11\113\1\342\12\113\12\111\1\113\1\111"+
    "\1\212\10\111\3\113\4\111\6\113\3\111\5\113\1\343"+
    "\16\113\3\111\14\235\1\316\4\235\1\344\47\235\17\0"+
    "\1\345\1\145\1\0\3\142\5\0\1\147\1\150\1\0"+
    "\1\346\10\0\1\147\1\150\30\0\1\16\10\0\1\347"+
    "\1\0\3\16\4\0\6\16\3\0\24\16\12\0\1\37"+
    "\10\0\1\347\1\0\3\37\4\0\6\37\3\0\24\37"+
    "\22\0\1\350\1\170\1\0\3\167\5\0\1\172\1\173"+
    "\1\0\1\351\10\0\1\172\1\173\30\0\1\45\10\0"+
    "\1\352\1\0\3\45\4\0\6\45\3\0\24\45\3\0"+
    "\1\61\2\0\3\61\1\0\2\61\1\0\5\61\1\353"+
    "\5\61\1\0\7\61\1\354\2\61\1\0\30\61\15\0"+
    "\1\102\1\0\1\345\1\145\1\102\3\355\2\0\1\204"+
    "\1\0\1\102\1\206\1\207\1\102\1\356\1\102\4\0"+
    "\3\102\1\206\1\207\16\102\12\0\1\101\5\0\1\102"+
    "\2\0\1\347\1\102\3\104\2\0\1\204\1\0\6\104"+
    "\3\0\1\101\23\104\14\0\1\357\57\0\11\111\1\212"+
    "\5\111\1\360\1\217\1\111\3\216\5\111\1\221\1\222"+
    "\1\111\1\361\10\111\1\221\1\222\30\111\1\113\1\111"+
    "\1\212\6\111\1\362\1\111\3\113\4\111\6\113\3\111"+
    "\24\113\3\111\22\0\3\363\66\0\3\364\110\0\1\365"+
    "\1\366\1\367\1\0\1\370\1\0\1\371\1\372\1\0"+
    "\1\373\3\0\1\374\1\375\30\0\3\376\66\0\3\377"+
    "\110\0\1\u0100\1\u0101\1\u0102\1\0\1\u0103\1\0\1\u0104"+
    "\1\u0105\1\0\1\u0106\3\0\1\u0107\1\u0108\6\0\1\61"+
    "\2\0\3\61\1\0\2\61\1\0\10\61\3\u0109\1\0"+
    "\12\61\1\0\31\61\2\0\3\61\1\0\2\61\1\0"+
    "\10\61\3\u010a\1\0\12\61\1\0\30\61\15\0\1\102"+
    "\2\0\1\145\1\102\3\355\2\0\1\204\1\0\1\102"+
    "\1\206\1\207\3\102\4\0\3\102\1\206\1\207\16\102"+
    "\20\0\1\102\3\0\1\102\3\u010b\2\0\1\204\1\0"+
    "\6\102\4\0\23\102\3\0\11\111\1\212\10\111\3\u010c"+
    "\55\111\1\212\10\111\3\u010d\55\111\1\212\32\111\1\u010e"+
    "\1\u010f\1\u0110\1\111\1\u0111\1\111\1\u0112\1\u0113\1\111"+
    "\1\u0114\3\111\1\u0115\1\u0116\6\111\22\0\3\u0117\66\0"+
    "\3\u0118\117\0\1\u0119\2\0\1\u011a\65\0\1\u0119\64\0"+
    "\1\u011b\74\0\1\u011c\72\0\1\u011d\65\0\1\u011e\101\0"+
    "\1\u011f\54\0\1\u0120\12\0\1\u0121\2\0\1\u0122\55\0"+
    "\1\u0123\40\0\3\u0124\66\0\3\u0125\117\0\1\u0126\2\0"+
    "\1\u0127\65\0\1\u0126\64\0\1\u0128\74\0\1\u0129\72\0"+
    "\1\u012a\65\0\1\u012b\101\0\1\u012c\54\0\1\u012d\12\0"+
    "\1\u012e\2\0\1\u012f\55\0\1\u0130\16\0\1\61\2\0"+
    "\3\61\1\0\2\61\1\0\10\61\3\u0131\1\0\12\61"+
    "\1\0\31\61\2\0\3\61\1\0\2\61\1\0\10\61"+
    "\3\u0132\1\0\12\61\1\0\30\61\15\0\1\102\3\0"+
    "\1\102\3\u0133\2\0\1\204\1\0\6\102\4\0\23\102"+
    "\3\0\11\111\1\212\10\111\3\u0134\55\111\1\212\10\111"+
    "\3\u0135\55\111\1\212\41\111\1\u0136\2\111\1\u0137\23\111"+
    "\1\212\41\111\1\u0136\26\111\1\212\35\111\1\u0138\32\111"+
    "\1\212\41\111\1\u0139\26\111\1\212\43\111\1\u013a\24\111"+
    "\1\212\40\111\1\u013b\27\111\1\212\51\111\1\u013c\16\111"+
    "\1\212\35\111\1\u013d\12\111\1\u013e\2\111\1\u013f\14\111"+
    "\1\212\40\111\1\u0140\16\111\17\0\1\u0141\15\0\1\346"+
    "\60\0\1\u0142\121\0\1\u0143\70\0\1\u0144\57\0\1\u0145"+
    "\101\0\1\u0146\74\0\1\u0147\67\0\1\u011d\62\0\1\u0144"+
    "\101\0\1\u0148\64\0\1\u0149\64\0\1\u014a\70\0\1\u014b"+
    "\33\0\1\u014c\15\0\1\351\60\0\1\u014d\121\0\1\u014e"+
    "\70\0\1\u014f\57\0\1\u0150\101\0\1\u0151\74\0\1\u0152"+
    "\67\0\1\u012a\62\0\1\u014f\101\0\1\u0153\64\0\1\u0154"+
    "\64\0\1\u0155\70\0\1\u0156\14\0\1\61\2\0\3\61"+
    "\1\0\2\61\1\0\5\61\1\u0157\5\61\1\0\7\61"+
    "\1\354\2\61\1\0\31\61\2\0\3\61\1\0\2\61"+
    "\1\0\13\61\1\u0142\12\61\1\0\30\61\15\0\1\102"+
    "\3\0\4\102\1\u0142\1\0\1\204\1\0\6\102\4\0"+
    "\23\102\3\0\11\111\1\212\5\111\1\u0158\15\111\1\361"+
    "\44\111\1\212\13\111\1\u0159\54\111\1\212\44\111\1\u015a"+
    "\23\111\1\212\44\111\1\u015b\23\111\1\212\33\111\1\u015c"+
    "\34\111\1\212\44\111\1\u015d\23\111\1\212\50\111\1\u015e"+
    "\17\111\1\212\47\111\1\u013a\20\111\1\212\41\111\1\u015b"+
    "\26\111\1\212\52\111\1\u015f\15\111\1\212\46\111\1\u0160"+
    "\21\111\1\212\42\111\1\u0161\25\111\1\212\42\111\1\u0162"+
    "\14\111\22\0\3\u0163\66\0\3\u0164\110\0\1\u0147\77\0"+
    "\1\u0147\67\0\1\u0165\61\0\1\u011d\104\0\1\u0147\63\0"+
    "\1\u0166\10\0\1\u0167\51\0\1\u011a\73\0\1\u0168\43\0"+
    "\3\u0169\66\0\3\u016a\110\0\1\u0152\77\0\1\u0152\67\0"+
    "\1\u016b\61\0\1\u012a\104\0\1\u0152\63\0\1\u016c\10\0"+
    "\1\u016d\51\0\1\u0127\73\0\1\u016e\21\0\1\61\2\0"+
    "\3\61\1\0\2\61\1\0\10\61\3\u016f\1\0\12\61"+
    "\1\0\30\61\11\111\1\212\10\111\3\u0170\55\111\1\212"+
    "\10\111\3\u0171\55\111\1\212\32\111\1\u015e\35\111\1\212"+
    "\41\111\1\u015e\26\111\1\212\40\111\1\u0172\27\111\1\212"+
    "\31\111\1\u013a\36\111\1\212\45\111\1\u015e\22\111\1\212"+
    "\40\111\1\u0173\10\111\1\u0174\16\111\1\212\32\111\1\u0137"+
    "\35\111\1\212\35\111\1\u0175\21\111\22\0\3\u0176\66\0"+
    "\3\u0177\120\0\1\u0178\71\0\1\u0179\60\0\1\u011d\104\0"+
    "\1\u017a\31\0\3\u017b\66\0\3\u017c\120\0\1\u017d\71\0"+
    "\1\u017e\60\0\1\u012a\104\0\1\u017f\7\0\1\61\2\0"+
    "\3\61\1\0\2\61\1\0\10\61\3\u0180\1\0\12\61"+
    "\1\0\30\61\11\111\1\212\10\111\3\u0181\55\111\1\212"+
    "\10\111\3\u0182\55\111\1\212\42\111\1\u0183\25\111\1\212"+
    "\43\111\1\u0184\24\111\1\212\33\111\1\u013a\34\111\1\212"+
    "\47\111\1\u0185\7\111\22\0\3\364\10\0\1\346\50\0"+
    "\1\u0186\1\0\1\u0186\5\0\1\u0187\10\0\1\u0188\75\0"+
    "\1\u0144\76\0\1\u0147\101\0\1\u0189\30\0\3\377\10\0"+
    "\1\351\50\0\1\u018a\1\0\1\u018a\5\0\1\u018b\10\0"+
    "\1\u018c\75\0\1\u014f\76\0\1\u0152\101\0\1\u018d\6\0"+
    "\1\61\2\0\3\61\1\0\2\61\1\0\10\61\3\u010a"+
    "\1\0\7\61\1\354\2\61\1\0\30\61\11\111\1\212"+
    "\10\111\3\u010d\10\111\1\361\44\111\1\212\3\111\1\u018e"+
    "\1\111\1\u018e\5\111\1\u018f\10\111\1\u0190\43\111\1\212"+
    "\31\111\1\u015b\36\111\1\212\37\111\1\u015e\30\111\1\212"+
    "\50\111\1\u0191\6\111\22\0\3\u0192\66\0\3\u0193\107\0"+
    "\1\u0194\47\0\3\u0195\66\0\3\u0196\107\0\1\u0197\25\0"+
    "\11\111\1\212\10\111\3\u0198\55\111\1\212\10\111\3\u0199"+
    "\55\111\1\212\31\111\1\u019a\25\111\22\0\3\u019b\66\0"+
    "\3\u019c\120\0\1\u0148\36\0\3\u019d\66\0\3\u019e\120\0"+
    "\1\u0153\14\0\11\111\1\212\10\111\3\u019f\55\111\1\212"+
    "\10\111\3\u01a0\55\111\1\212\42\111\1\u015f\14\111\25\0"+
    "\1\u01a1\60\0\1\u0186\1\0\1\u0186\1\u01a2\15\0\1\u0188"+
    "\57\0\1\u01a3\60\0\1\u018a\1\0\1\u018a\1\u01a4\15\0"+
    "\1\u018c\32\0\11\111\1\212\13\111\1\u01a5\54\111\1\212"+
    "\3\111\1\u018e\1\111\1\u018e\1\u01a6\15\111\1\u0190\32\111"+
    "\22\0\3\u01a7\66\0\3\u01a8\66\0\3\u01a9\66\0\3\u01aa"+
    "\44\0\11\111\1\212\10\111\3\u01ab\55\111\1\212\10\111"+
    "\3\u01ac\44\111\22\0\3\u0188\61\0\1\u0186\1\0\1\u0186"+
    "\2\0\3\u01a8\11\0\1\u0188\54\0\3\u018c\61\0\1\u018a"+
    "\1\0\1\u018a\2\0\3\u01aa\11\0\1\u018c\32\0\11\111"+
    "\1\212\10\111\3\u0190\55\111\1\212\3\111\1\u018e\1\111"+
    "\1\u018e\2\111\3\u01ac\11\111\1\u0190\32\111";

  private static int [] zzUnpacktrans() {
    int [] result = new int[20976];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\5\1\1\11\4\1\2\11\4\1\2\11\2\1\1\11"+
    "\4\1\1\11\6\1\1\11\2\1\1\11\2\1\1\11"+
    "\17\1\1\0\20\1\1\11\4\1\2\0\2\1\1\0"+
    "\4\1\3\0\1\11\4\1\1\11\1\0\1\11\1\1"+
    "\2\0\5\1\2\0\4\1\1\11\1\0\6\1\1\11"+
    "\3\0\5\1\3\0\6\1\1\11\3\0\3\1\1\0"+
    "\7\1\1\11\1\1\1\11\1\0\3\1\1\0\6\1"+
    "\1\11\6\1\1\0\1\1\1\0\3\1\1\0\7\1"+
    "\1\11\1\0\2\1\1\0\3\1\1\11\1\1\1\0"+
    "\11\1\1\0\2\1\1\11\1\0\1\1\2\0\1\1"+
    "\1\0\4\1\1\11\1\0\1\1\27\0\3\1\45\0"+
    "\3\1\23\0\1\11\12\0\1\11\4\0\1\1\6\0"+
    "\1\1\20\0\1\1\6\0\2\1\3\0\2\1\3\0"+
    "\3\1\5\0\1\11\3\0\1\11\3\0\1\1\13\0"+
    "\1\1\1\0\1\1\1\0\1\1\7\0\1\1\1\0"+
    "\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private java.util.Stack<Integer> _zzStateStack = new java.util.Stack<Integer>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 57: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 58: break;
          case 3:
            { _zzStateStack.push(yystate()); yybegin(READ_QQ_STR); return IonTypes.QQ_START;
            }
          // fall through
          case 59: break;
          case 4:
            { return IonTypes.IDENTIFIER;
            }
          // fall through
          case 60: break;
          case 5:
            { _zzStateStack.push(yystate()); yybegin(READ_Q_STR); return IonTypes.Q_START;
            }
          // fall through
          case 61: break;
          case 6:
            { _zzStateStack.push(yystate()); yybegin(S_EXP); return IonTypes.LPAREN;
            }
          // fall through
          case 62: break;
          case 7:
            { return IonTypes.COMMA;
            }
          // fall through
          case 63: break;
          case 8:
            { return IonTypes.INTEGER;
            }
          // fall through
          case 64: break;
          case 9:
            { _zzStateStack.push(yystate()); yybegin(ION_LIST); return IonTypes.LBRACKET;
            }
          // fall through
          case 65: break;
          case 10:
            { _zzStateStack.push(yystate()); yybegin(ION_STRUCT); return IonTypes.LBRACE;
            }
          // fall through
          case 66: break;
          case 11:
            { yybegin(_zzStateStack.pop()); return IonTypes.RBRACKET;
            }
          // fall through
          case 67: break;
          case 12:
            { _zzStateStack.push(yystate()); yybegin(READ_KEY); return IonTypes.QQUOTE;
            }
          // fall through
          case 68: break;
          case 13:
            { return IonTypes.KEY_NAME;
            }
          // fall through
          case 69: break;
          case 14:
            { _zzStateStack.push(yystate()); yybegin(READ_KEY); return IonTypes.QUOTE;
            }
          // fall through
          case 70: break;
          case 15:
            { _zzStateStack.push(yystate()); yybegin(READ_VALUE); return IonTypes.SEPARATOR;
            }
          // fall through
          case 71: break;
          case 16:
            { yybegin(_zzStateStack.pop()); return IonTypes.RBRACE;
            }
          // fall through
          case 72: break;
          case 17:
            { yybegin(READ_QQ_STR); return IonTypes.QQ_START;
            }
          // fall through
          case 73: break;
          case 18:
            { yybegin(_zzStateStack.pop()); return IonTypes.IDENTIFIER;
            }
          // fall through
          case 74: break;
          case 19:
            { yybegin(READ_Q_STR); return IonTypes.Q_START;
            }
          // fall through
          case 75: break;
          case 20:
            { yybegin(S_EXP); return IonTypes.LPAREN;
            }
          // fall through
          case 76: break;
          case 21:
            { yybegin(_zzStateStack.pop()); return IonTypes.INTEGER;
            }
          // fall through
          case 77: break;
          case 22:
            { yybegin(ION_LIST); return IonTypes.LBRACKET;
            }
          // fall through
          case 78: break;
          case 23:
            { yybegin(ION_STRUCT); return IonTypes.LBRACE;
            }
          // fall through
          case 79: break;
          case 24:
            { yybegin(_zzStateStack.pop()); return IonTypes.QQUOTE;
            }
          // fall through
          case 80: break;
          case 25:
            { yybegin(_zzStateStack.pop()); return IonTypes.QUOTE;
            }
          // fall through
          case 81: break;
          case 26:
            { return IonTypes.OPERATOR;
            }
          // fall through
          case 82: break;
          case 27:
            { yybegin(_zzStateStack.pop()); return IonTypes.RPAREN;
            }
          // fall through
          case 83: break;
          case 28:
            { return IonTypes.BAD_CHARACTER;
            }
          // fall through
          case 84: break;
          case 29:
            { return (isValidBase64(yytext())) ? IonTypes.BLOB_VALUE : TokenType.BAD_CHARACTER;
            }
          // fall through
          case 85: break;
          case 30:
            { return IonTypes.QQ_VALUE;
            }
          // fall through
          case 86: break;
          case 31:
            { yybegin(_zzStateStack.pop()); return IonTypes.QQ_END;
            }
          // fall through
          case 87: break;
          case 32:
            { return IonTypes.Q_VALUE;
            }
          // fall through
          case 88: break;
          case 33:
            { yybegin(_zzStateStack.pop()); return IonTypes.Q_END;
            }
          // fall through
          case 89: break;
          case 34:
            { return IonTypes.COMMENT;
            }
          // fall through
          case 90: break;
          case 35:
            { return IonTypes.DECIMAL;
            }
          // fall through
          case 91: break;
          case 36:
            { return IonTypes.ANNOTATION_SEPARATOR;
            }
          // fall through
          case 92: break;
          case 37:
            { _zzStateStack.push(yystate()); yybegin(READ_LOB); return IonTypes.LOB_START;
            }
          // fall through
          case 93: break;
          case 38:
            { _zzStateStack.push(yystate()); yybegin(READ_VALUE); return IonTypes.ANNOTATION_SEPARATOR;
            }
          // fall through
          case 94: break;
          case 39:
            { yybegin(_zzStateStack.pop()); return IonTypes.DECIMAL;
            }
          // fall through
          case 95: break;
          case 40:
            { yybegin(READ_LOB); return IonTypes.LOB_START;
            }
          // fall through
          case 96: break;
          case 41:
            { yybegin(_zzStateStack.pop()); return IonTypes.LOB_END;
            }
          // fall through
          case 97: break;
          case 42:
            { _zzStateStack.push(yystate()); yybegin(READ_QQQ_STR); return IonTypes.QQQ_START;
            }
          // fall through
          case 98: break;
          case 43:
            { return IonTypes.BININT;
            }
          // fall through
          case 99: break;
          case 44:
            { return IonTypes.HEXINT;
            }
          // fall through
          case 100: break;
          case 45:
            { _zzStateStack.push(yystate()); yybegin(READ_KEY); return IonTypes.QQQUOTE;
            }
          // fall through
          case 101: break;
          case 46:
            { yybegin(READ_QQQ_STR); return IonTypes.QQQ_START;
            }
          // fall through
          case 102: break;
          case 47:
            { yybegin(_zzStateStack.pop()); return IonTypes.HEXINT;
            }
          // fall through
          case 103: break;
          case 48:
            { yybegin(_zzStateStack.pop()); return IonTypes.QQQUOTE;
            }
          // fall through
          case 104: break;
          case 49:
            { yybegin(_zzStateStack.pop()); return IonTypes.QQQ_END;
            }
          // fall through
          case 105: break;
          case 50:
            { return IonTypes.NULL;
            }
          // fall through
          case 106: break;
          case 51:
            { return IonTypes.BOOLEAN;
            }
          // fall through
          case 107: break;
          case 52:
            { yybegin(_zzStateStack.pop()); return IonTypes.NULL;
            }
          // fall through
          case 108: break;
          case 53:
            { yybegin(_zzStateStack.pop()); return IonTypes.BOOLEAN;
            }
          // fall through
          case 109: break;
          case 54:
            { yypushback(3); return IonTypes.QQQ_VALUE;
            }
          // fall through
          case 110: break;
          case 55:
            { return IonTypes.TIMESTAMP;
            }
          // fall through
          case 111: break;
          case 56:
            { yybegin(_zzStateStack.pop()); return IonTypes.TIMESTAMP;
            }
          // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
